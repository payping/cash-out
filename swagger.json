{
  "openapi": "3.0.1",
  "info": {
    "title": "Cash Out Public API",
    "description": "Cash-out service's public APIs",
    "version": "v1"
  },
  "servers": [
    {
      "url": "https://api.payping.ir/"
    }
  ],
  "paths": {
    "/v1/cash-out/overview": {
      "get": {
        "tags": [
          "CashOut"
        ],
        "summary": "Get an overview of current user's infromation",
        "operationId": "OverviewGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/OverviewResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cash-out/transactions": {
      "get": {
        "tags": [
          "CashOut"
        ],
        "summary": "Query on user's Transactions",
        "description": "You can filter Transactions by these fields:\r\n<br /><br /><b>Ref</b>: Reference code of a Transaction\r\n<br /><br /><b>CreatedOn</b>: Transaction's UTC Date and time of creation\r\n<br /><br /><b>TransactionType</b>: Determines general type of a Transaction. Values of Transaction type are:\r\n<br /><br /><b>1 = Deposit</b>: Increases Account's Balance \r\n<br /><br /><b>2 = Withdraw</b>: Decreases Account's Balance\r\n<br /><br /><b> ** Notes ** </b><br /><br /><b>Field names in Filter and OrderBy clauses are not case sensitive</b>: For example both filter clauses below are correct:\r\n<br /><br /><code>\r\nFilter=ref=PT-123654\r\nFilter=Ref=PT-123654\r\n</code><br /><br /><b>Field equals to given value</b>:  If you want to filter fields that exactly match the given value use <b>=</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=ref=PT-123654\r\n</code><br /><br /><b>Field contains given value</b>: If you want to filter fields that contain the given value use <b>=*</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=ref= *PT-123\r\n</code><br /><br /><b>Field is not equal to given value</b>: If you want to filter fields that do not match the given value use <b>!=</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=ref!=PT-123654\r\n</code><br /><br /><b>Logical operators</b>: You can use logical operators to combine multiple filter conditions. these operators are:\r\n<br /><br /><b>And operator</b>: Use ' , '. For Example:\r\n<br /><br /><code>\r\nFilter=ref=PT-12345,TransactionType=1\r\n</code><br /><br /><b>Or operator</b>: Use ' | ' . For Example:\r\n<br /><br /><code>\r\nFilter=ref=PT-12345|TransactionType=1\r\n</code>",
        "operationId": "TransactionListWithqueryGet",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/LegacyTransactionDetailsVMPagedQueryResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cash-out/deposit": {
      "post": {
        "tags": [
          "Deposit"
        ],
        "summary": "Creates a Deposit Identifier to be used for increasing User's Balance directly when money deposits in our account with given identifier in Identfied deposits.",
        "description": "In the Input request model, there is a field called <b>NotifyUrl</b><br />\r\nPut your Webhook address in <b>NotifyUrl</b> to get notified when a money deposits with created identifier<br />\r\nWith every Identified Deposit a HTTP request with POST http method is sent to<b>NotifyUrl</b> and contains a JSON object inside it's body with model below:<br /><code>\r\n{\r\n    \"Amount\":number,\r\n    \"DepositId\":string,\r\n    \"BankReference\":string,\r\n    \"TransactionNumber\":string,\r\n    \"DepositLocalTimestamp\":number,\r\n}\r\n</code>",
        "operationId": "CreateDepositWithIdWithmodelPost",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepositIdentifierRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepositIdentifierRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/CreateDepositIdentifierRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositDetails"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchRequestError"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Query on user's Deposit Identifiers",
        "description": "You can filter Deposit Identifiers by these fields:\r\n<br /><br /><b>Code</b>: Unique Code of Deposit Identifier\r\n<br /><br /><b>DepositId</b>: Identifier of Deposit\r\n<br /><br /><b>IsLegal</b>: A flag which determines if Deposit Identifier's owner is a legal or a natural person.\r\n<br /><br /><b>BusinessNationalId</b>: Business national Id of Deposit Identifier's owner. for legal person\r\n<br /><br /><b>NationalCode</b>: National code of Deposit Identifier's owner. for natural person\r\n<br /><br /><b>CreatedOn</b>: Deposit Identifier's UTC Date and time of creation\r\n<br /><br /><b> ** Notes ** </b><br /><br /><b>Field names in Filter and OrderBy clauses are not case sensitive</b>: For example both filter clauses below are correct:\r\n<br /><br /><code>\r\nFilter=Code=PT-123654\r\nFilter=Code=PT-123654\r\n</code><br /><br /><b>Field equals to given value</b>:  If you want to filter fields that exactly match the given value use <b>=</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-123654\r\n</code><br /><br /><b>Field contains given value</b>: If you want to filter fields that contain the given value use <b>=*</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code= *PT-123\r\n</code><br /><br /><b>Field is not equal to given value</b>: If you want to filter fields that do not match the given value use <b>!=</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code!=PT-123654\r\n</code><br /><br /><b>Logical operators</b>: You can use logical operators to combine multiple filter conditions. these operators are:\r\n<br /><br /><b>And operator</b>: Use ' , '. For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-12345,IsLegal=true\r\n</code><br /><br /><b>Or operator</b>: Use ' | ' . For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-12345|IsLegal=true\r\n</code>",
        "operationId": "DepositsListWithqueryGet",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositDetailsPagedQueryResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cash-out/deposit/provider-deposit-iban": {
      "get": {
        "tags": [
          "Deposit"
        ],
        "summary": "Get Bank Account Information to use for Identified Deposits.",
        "description": "Contains IBAN, Account holder, Bank name and Account number to use for Identifed deposits in response body to use",
        "operationId": "DepositIbanGet",
        "parameters": [],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/DepositIbanInfo"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cash-out/requests": {
      "post": {
        "tags": [
          "Request"
        ],
        "summary": "Public API for customers to create and submit Settlements within a Request.",
        "description": "In the Input request model, there is a field called <b>NotifyUrl</b><br />\r\nPut your Webhook address in <b>NotifyUrl</b> to get notified about change of each Settlement's status in created Request<br />\r\nWith every status change a HTTP request with POST http method is sent to<b>NotifyUrl</b> and contains a JSON object inside it's body with model below:<br /><code>\r\n{\r\n    \"Status\":number,\r\n    \"ClientRefId\":string,\r\n    \"SettlementCode\":string,\r\n    \"BankTransferReference\":string\r\n}\r\n</code>",
        "operationId": "CreateBatchRequestWithmodelPost",
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchRequest"
              }
            },
            "text/json": {
              "schema": {
                "$ref": "#/components/schemas/BatchRequest"
              }
            },
            "application/*+json": {
              "schema": {
                "$ref": "#/components/schemas/BatchRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BatchResult"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/BatchRequestError"
                  }
                }
              }
            }
          }
        }
      },
      "get": {
        "tags": [
          "Request"
        ],
        "summary": "Query on user's Requests",
        "description": "You can filter Requests by these fields:\r\n<br /><br /><b>Code</b>: Unique Code of Request\r\n<br /><br /><b>Title</b>: Title of Request\r\n<br /><br /><b>TotalAmount</b>: Total Amount of Request\r\n<br /><br /><b>CreatedOn</b>: Request's UTC Date and time of creation\r\n<br /><br /><b>Status</b>: Determines status of a Request. Values of Status are:\r\n<br /><br /><b>0 = Incomplete</b>: Incomplete means the Request is not submitted to banking provider yet\r\n<br /><br /><b>1 = Draft</b>: Draft means the Request is stored as draft and is not submitted to banking provider yet\r\n<br /><br /><b>2 = Schedule</b>: Schedule means the Request is scheduled\r\n<br /><br /><b>3 = Final</b>: Final means the Request has been submitted to banking provider successfully\r\n<br /><br /><b>4 = Unknown</b>: Unknown means the Request's current status is not known due to unexpected errors or loss of connection with banking provider.\r\n<br /><br /><b>5 = Failed</b>: Failed means the Request has been submitted but was not accepted by banking provider due to validation or other temporary errors.\r\n<br /><br /><b>TransferType</b>: Transfer type of Request's Settlements. Values of Transfer type are: \r\n<br /><br /><b>0 = AUTO</b>: Tries NORMAL flow first for three times and if NORMAL flow failed in all tries then uses ACH flow\r\n<br /><br /><b>1 = NORMAL</b>: Account to Account Money Transfer Inside Bank\r\n<br /><br /><b>2 = ACH</b>: Automated Clearing House(ACH) -> Bank-to-Bank Money Transfer aka PAYA\r\n<br /><br /><b> ** Notes ** </b><br /><br /><b>Field names in Filter and OrderBy clauses are not case sensitive</b>: For example both filter clauses below are correct:\r\n<br /><br /><code>\r\nFilter=Code=PT-123654\r\nFilter=Code=PT-123654\r\n</code><br /><br /><b>Field equals to given value</b>:  If you want to filter fields that exactly match the given value use <b>=</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-123654\r\n</code><br /><br /><b>Field contains given value</b>: If you want to filter fields that contain the given value use <b>=*</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code= *PT-123\r\n</code><br /><br /><b>Field is not equal to given value</b>: If you want to filter fields that do not match the given value use <b>!=</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code!=PT-123654\r\n</code><br /><br /><b>Logical operators</b>: You can use logical operators to combine multiple filter conditions. these operators are:\r\n<br /><br /><b>And operator</b>: Use ' , '. For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-12345,Status=1\r\n</code><br /><br /><b>Or operator</b>: Use ' | ' . For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-12345|Status=1\r\n</code>",
        "operationId": "RequestsListWithqueryGet",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestDetailsVMPagedQueryResult"
                }
              }
            }
          }
        }
      }
    },
    "/v1/cash-out/requests/settlements": {
      "get": {
        "tags": [
          "Settlement"
        ],
        "summary": "Query on user's Settlements",
        "description": "You can filter Settlements by these fields:\r\n<br /><br /><b>Code</b>: Unique Code of Settlement\r\n<br /><br /><b>Amount</b>: Amount of Settlement\r\n<br /><br /><b>BankTransferReference</b>: Bank's transfer reference assigned to Settlement in transmission phase.\r\n<br /><br /><b>ModifiedOn</b>: Settlement's UTC Date and time of last update\r\n<br /><br /><b>CreatedOn</b>: Settlement's UTC Date and time of creation\r\n<br /><br /><b>Iban</b>: Settlement's Destination IBAN\r\n<br /><br /><b>ClientRefId</b>: Settlement's Client ref Id Assigned by creator. Unique between Settlements of in each Request\r\n<br /><br /><b>Mobile</b>: Mobile number of Settlement's receiver\r\n<br /><br /><b>NationalId</b>: National Id of Settlement's receiver\r\n<br /><br /><b>FullName</b>: Full name of Settlement's receiver\r\n<br /><br /><b>Status</b>: Determines status of a Settlement. Values of Status are:\r\n<br /><br /><b>-1 = Draft</b>: Draft means the Settlement is stored as draft and is not submitted to banking provider yet\r\n<br /><br /><b>0 = Incomplete</b>: Incomplete means the Settlement is not submitted to banking provider yet\r\n<br /><br /><b>1 = FAILED</b>: Failed means the settlement has been submitted to banking provider but it has failed in transmission phase\r\n<br /><br /><b>2 = IN_PROGRESS</b>: In progress means the settlement has been submitted to banking provider and is pending for transmission\r\n<br /><br /><b>3 = TRANSFERRED</b>: Transferred means the settlement has been submitted to banking provider and was successfully transferred\r\n<br /><br /><b>DestinationBank</b>: Destination Bank of Settlement. Values of Destination bank are: \r\n<br /><br /><b>012 = Mellat</b><br /><br /><b>019 = Saderat</b><br /><br /><b>054 = Parsian</b><br /><br /><b>056 = Saman</b><br /><br /><b>062 = Ayande</b><br /><br /><b>057 = Pasargad</b><br /><br /><b>018 = Tejarat</b><br /><br /><b>061 = Shahr</b><br /><br /><b>016 = Keshavarzi</b><br /><br /><b>017 = Melli</b><br /><br /><b>055 = EghtesadNovin</b><br /><br /><b>070 = Resalat</b><br /><br /><b>078 = MiddleEast</b><br /><br /><b> ** Notes ** </b><br /><br /><b>Field names in Filter and OrderBy clauses are not case sensitive</b>: For example both filter clauses below are correct:\r\n<br /><br /><code>\r\nFilter=Code=PT-123654\r\nFilter=Code=PT-123654\r\n</code><br /><br /><b>Field equals to given value</b>:  If you want to filter fields that exactly match the given value use <b>=</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-123654\r\n</code><br /><br /><b>Field contains given value</b>: If you want to filter fields that contain the given value use <b>=*</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code= *PT-123\r\n</code><br /><br /><b>Field is not equal to given value</b>: If you want to filter fields that do not match the given value use <b>!=</b> operator. For Example:\r\n<br /><br /><code>\r\nFilter=Code!=PT-123654\r\n</code><br /><br /><b>Logical operators</b>: You can use logical operators to combine multiple filter conditions. these operators are:\r\n<br /><br /><b>And operator</b>: Use ' , '. For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-12345,Status=1\r\n</code><br /><br /><b>Or operator</b>: Use ' | ' . For Example:\r\n<br /><br /><code>\r\nFilter=Code=PT-12345|Status=1\r\n</code>",
        "operationId": "SearchSettlementsListWithqueryGet",
        "parameters": [
          {
            "name": "Page",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "PageSize",
            "in": "query",
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "name": "OrderBy",
            "in": "query",
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "Filter",
            "in": "query",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "400": {
            "description": "Bad Request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponseObject"
                }
              }
            }
          },
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SettlementFullDetailsVMPagedQueryResult"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "BadRequestResponseObject": {
        "type": "object",
        "properties": {
          "error": {
            "type": "string",
            "nullable": true
          },
          "message": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchRequest": {
        "required": [
          "settlements",
          "title"
        ],
        "type": "object",
        "properties": {
          "title": {
            "type": "string"
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "notifyUrl": {
            "type": "string",
            "nullable": true
          },
          "transferType": {
            "$ref": "#/components/schemas/TransferType"
          },
          "about": {
            "$ref": "#/components/schemas/SettlementAboutType"
          },
          "settlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchSettlementVM"
            }
          }
        },
        "additionalProperties": false
      },
      "BatchRequestError": {
        "type": "object",
        "properties": {
          "key": {
            "type": "string",
            "nullable": true
          },
          "error": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchResult": {
        "type": "object",
        "properties": {
          "requestCode": {
            "type": "string",
            "nullable": true
          },
          "settlements": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/BatchSettlementDetailsVM"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchSettlementDetailsVM": {
        "type": "object",
        "properties": {
          "settlementCode": {
            "type": "string",
            "nullable": true
          },
          "clientRefId": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "BatchSettlementVM": {
        "required": [
          "amount",
          "clientRefId",
          "fullName",
          "iban"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "format": "double"
          },
          "iban": {
            "type": "string"
          },
          "description": {
            "maxLength": 50,
            "type": "string",
            "nullable": true
          },
          "clientRefId": {
            "type": "string"
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "nationalId": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "CreateDepositIdentifierRequest": {
        "type": "object",
        "properties": {
          "isLegal": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "businessNationalId": {
            "type": "string",
            "nullable": true
          },
          "registerDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "nationalCode": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "notifyUrl": {
            "type": "string",
            "nullable": true
          },
          "sourceIbans": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sourceCardNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepositDetails": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "depositId": {
            "type": "string",
            "nullable": true
          },
          "isLegal": {
            "type": "boolean"
          },
          "title": {
            "type": "string",
            "nullable": true
          },
          "businessNationalId": {
            "type": "string",
            "nullable": true
          },
          "registerDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "firstName": {
            "type": "string",
            "nullable": true
          },
          "lastName": {
            "type": "string",
            "nullable": true
          },
          "nationalCode": {
            "type": "string",
            "nullable": true
          },
          "phoneNumber": {
            "type": "string",
            "nullable": true
          },
          "birthDate": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "sourceIbans": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          },
          "sourceCardNumbers": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepositDetailsPagedQueryResult": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DepositDetails"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DepositIbanInfo": {
        "type": "object",
        "properties": {
          "accountNumber": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "bankName": {
            "type": "string",
            "nullable": true
          },
          "accountHolder": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "DestinationBank": {
        "enum": [
          "Mellat=0 ",
          "Keshavarzi=1 ",
          "Melli=2 ",
          "Tejarat=3 ",
          "Saderat=4 ",
          "Parsian=5 ",
          "EghtesadNovin=6 ",
          "Saman=7 ",
          "Pasargad=8 ",
          "Shahr=9 ",
          "Ayande=10 ",
          "Resalat=11 ",
          "MiddleEast=12 "
        ],
        "type": "integer",
        "format": "int32"
      },
      "LegacyTransactionDetailsVM": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "transactionType": {
            "$ref": "#/components/schemas/OldTransactionType"
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "balance": {
            "type": "number",
            "format": "double"
          }
        },
        "additionalProperties": false
      },
      "LegacyTransactionDetailsVMPagedQueryResult": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/LegacyTransactionDetailsVM"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "OldTransactionType": {
        "enum": [
          "Input=0 ",
          "Output=1 ",
          "InputWage=2 ",
          "OutputWage=3 ",
          "ManualInput=4 ",
          "ManualOutput=5 ",
          "DepositInput=6 "
        ],
        "type": "integer",
        "format": "int32"
      },
      "OverviewResult": {
        "type": "object",
        "properties": {
          "balance": {
            "type": "number",
            "format": "double"
          },
          "withdrawableBalance": {
            "type": "number",
            "format": "double"
          },
          "totalWithdraw": {
            "type": "number",
            "format": "double"
          },
          "isDepositActivate": {
            "type": "boolean"
          },
          "hasUnknown": {
            "type": "boolean"
          },
          "excelURL": {
            "type": "string",
            "nullable": true
          },
          "authenticatorTotpEnabled": {
            "type": "boolean"
          },
          "isCritical": {
            "type": "boolean"
          }
        },
        "additionalProperties": false
      },
      "RequestDetailsVM": {
        "type": "object",
        "properties": {
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "code": {
            "type": "string",
            "nullable": true
          },
          "totalWage": {
            "type": "integer",
            "format": "int32"
          },
          "totalAmount": {
            "type": "number",
            "format": "double"
          },
          "status": {
            "$ref": "#/components/schemas/RequestStatus"
          },
          "failedCount": {
            "type": "integer",
            "format": "int32"
          },
          "succeededCount": {
            "type": "integer",
            "format": "int32"
          },
          "inProgressCount": {
            "type": "integer",
            "format": "int32"
          },
          "submittedTime": {
            "type": "string",
            "format": "date-time"
          },
          "title": {
            "type": "string",
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestDetailsVMPagedQueryResult": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RequestDetailsVM"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "RequestStatus": {
        "enum": [
          "InComplete=0 ",
          "Draft=1 ",
          "Schedule=2 ",
          "Final=3 ",
          "Unknown=4 ",
          "Failed=5 "
        ],
        "type": "integer",
        "format": "int32"
      },
      "SettlementAboutType": {
        "enum": [
          "Other=0 ",
          "Salary=1 ",
          "Insurance=2 ",
          "Health=3 ",
          "Investment=4 ",
          "Currency=5 ",
          "Retirement=6 ",
          "Movable=7 ",
          "Immovable=8 ",
          "CashManagement=9 ",
          "Customs=10 ",
          "Tax=11 ",
          "OtherGovernment=12 ",
          "Facilities=13 ",
          "Guarantee=14 ",
          "Daily=15 ",
          "Charity=16 ",
          "Commodity=17 ",
          "Services=18 "
        ],
        "type": "integer",
        "format": "int32"
      },
      "SettlementFullDetailsVM": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string",
            "nullable": true
          },
          "wage": {
            "type": "integer",
            "format": "int32"
          },
          "amount": {
            "type": "number",
            "format": "double"
          },
          "requestCode": {
            "type": "string",
            "nullable": true
          },
          "destinationBank": {
            "$ref": "#/components/schemas/DestinationBank"
          },
          "persianBankName": {
            "type": "string",
            "nullable": true
          },
          "iban": {
            "type": "string",
            "nullable": true
          },
          "fullName": {
            "type": "string",
            "nullable": true
          },
          "mobile": {
            "type": "string",
            "nullable": true
          },
          "nationalId": {
            "type": "string",
            "nullable": true
          },
          "description": {
            "type": "string",
            "nullable": true
          },
          "bankTransferReference": {
            "type": "string",
            "nullable": true
          },
          "createdOn": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/SettlementStatus"
          },
          "transferType": {
            "$ref": "#/components/schemas/TransferType"
          },
          "clientRefId": {
            "type": "string",
            "nullable": true
          },
          "nearestACHTime": {
            "type": "string",
            "format": "date-time",
            "nullable": true
          },
          "submittedTime": {
            "type": "string",
            "format": "date-time"
          }
        },
        "additionalProperties": false
      },
      "SettlementFullDetailsVMPagedQueryResult": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SettlementFullDetailsVM"
            },
            "nullable": true
          }
        },
        "additionalProperties": false
      },
      "SettlementStatus": {
        "enum": [
          "Draft=-1",
          "InComplete=0 ",
          "FAILED=1 ",
          "IN_PROGRESS=2 ",
          "TRANSFERRED=3 "
        ],
        "type": "integer",
        "format": "int32"
      },
      "TransferType": {
        "enum": [
          "AUTO=0 ",
          "NORMAL=1 ",
          "ACH=2 "
        ],
        "type": "integer",
        "format": "int32"
      }
    },
    "securitySchemes": {
      "Bearer": {
        "type": "apiKey",
        "description": "JWT Authorization header using the Bearer scheme. Example: \"bearer {token}\"",
        "name": "Authorization",
        "in": "header"
      }
    }
  },
  "security": [
    {
      "Bearer": []
    }
  ]
}